{"version":3,"file":"mobxreactlite.umd.development.js","sources":["../src/utils/assertEnvironment.ts","../src/utils/observerBatching.ts","../src/utils/utils.ts","../src/utils/printDebugValue.ts","../src/utils/reactionCleanupTracking.ts","../src/staticRendering.ts","../src/useObserver.ts","../src/observer.ts","../src/ObserverComponent.ts","../src/useLocalObservable.ts","../src/useAsObservableSource.ts","../src/useLocalStore.ts","../src/index.ts"],"sourcesContent":["import { makeObservable } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!makeObservable) {\n    throw new Error(\"mobx-react-lite@3 requires mobx at least version 6 to be available\")\n}\n","import { configure } from \"mobx\"\n\nexport function defaultNoopBatch(callback: () => void) {\n    callback()\n}\n\nexport function observerBatching(reactionScheduler: any) {\n    if (!reactionScheduler) {\n        reactionScheduler = defaultNoopBatch\n        if (\"production\" !== process.env.NODE_ENV) {\n            console.warn(\n                \"[MobX] Failed to get unstable_batched updates from react-dom / react-native\"\n            )\n        }\n    }\n    configure({ reactionScheduler })\n}\n\nexport const isObserverBatched = () => {\n    if (\"production\" !== process.env.NODE_ENV) {\n        console.warn(\"[MobX] Deprecated\")\n    }\n\n    return true\n}\n","import { useCallback, useState } from \"react\"\n\nconst EMPTY_ARRAY: any[] = []\n\nexport function useForceUpdate() {\n    const [, setTick] = useState(0)\n\n    const update = useCallback(() => {\n        setTick(tick => tick + 1)\n    }, EMPTY_ARRAY)\n\n    return update\n}\n\nconst deprecatedMessages: string[] = []\n\nexport function useDeprecated(msg: string) {\n    if (!deprecatedMessages.includes(msg)) {\n        deprecatedMessages.push(msg)\n        console.warn(msg)\n    }\n}\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","import { Reaction } from \"mobx\"\n\nexport interface IReactionTracking {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction\n    /**\n     * The time (in ticks) at which point we should dispose of the reaction\n     * if this component hasn't yet been fully mounted.\n     */\n    cleanAt: number\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount: boolean\n}\n\nexport function createTrackingData(reaction: Reaction) {\n    const trackingData: IReactionTracking = {\n        reaction,\n        mounted: false,\n        changedBeforeMount: false,\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS\n    }\n    return trackingData\n}\n\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10_000\n\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10_000\n\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nconst uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\n\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nlet reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\n\nfunction ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\n    }\n}\n\nexport function scheduleCleanupOfReactionIfLeaked(\n    ref: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.add(ref)\n\n    ensureCleanupTimerRunning()\n}\n\nexport function recordReactionAsCommitted(\n    reactionRef: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.delete(reactionRef)\n}\n\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined\n\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    const now = Date.now()\n    uncommittedReactionRefs.forEach(ref => {\n        const tracking = ref.current\n        if (tracking) {\n            if (now >= tracking.cleanAt) {\n                // It's time to tidy up this leaked reaction.\n                tracking.reaction.dispose()\n                ref.current = null\n                uncommittedReactionRefs.delete(ref)\n            }\n        }\n    })\n\n    if (uncommittedReactionRefs.size > 0) {\n        // We've just finished a round of cleanups but there are still\n        // some leak candidates outstanding.\n        ensureCleanupTimerRunning()\n    }\n}\n\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        cleanUncommittedReactions()\n    }\n}\n\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        reactionCleanupHandle = undefined\n    }\n    uncommittedReactionRefs.clear()\n}\n","let globalIsUsingStaticRendering = false\n\nexport function enableStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\n\nimport { printDebugValue } from \"./utils/printDebugValue\"\nimport {\n    createTrackingData,\n    IReactionTracking,\n    recordReactionAsCommitted,\n    scheduleCleanupOfReactionIfLeaked\n} from \"./utils/reactionCleanupTracking\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useForceUpdate } from \"./utils/utils\"\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\nexport function useObserver<T>(fn: () => T, baseComponentName: string = \"observed\"): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    const forceUpdate = useForceUpdate()\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const reactionTrackingRef = React.useRef<IReactionTracking | null>(null)\n\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n\n        const newReaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.\n                trackingData.changedBeforeMount = true\n            }\n        })\n\n        const trackingData = createTrackingData(newReaction)\n        reactionTrackingRef.current = trackingData\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\n    }\n\n    const { reaction } = reactionTrackingRef.current!\n    React.useDebugValue(reaction, printDebugValue)\n\n    React.useEffect(() => {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef)\n\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true\n            // Got a change before first mount, force an update\n            if (reactionTrackingRef.current.changedBeforeMount) {\n                reactionTrackingRef.current.changedBeforeMount = false\n                forceUpdate()\n            }\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This can be due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up\n\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), () => {\n                    // We've definitely already been mounted at this point\n                    forceUpdate()\n                }),\n                mounted: true,\n                changedBeforeMount: false,\n                cleanAt: Infinity\n            }\n            forceUpdate()\n        }\n\n        return () => {\n            reactionTrackingRef.current!.reaction.dispose()\n            reactionTrackingRef.current = null\n        }\n    }, [])\n\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    let rendering!: T\n    let exception\n    reaction.track(() => {\n        try {\n            rendering = fn()\n        } catch (e) {\n            exception = e\n        }\n    })\n\n    if (exception) {\n        throw exception // re-throw any exceptions caught during rendering\n    }\n\n    return rendering\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n    wrappedComponent.displayName = baseComponentName\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n    memoComponent.displayName = baseComponentName\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import { useObserver } from \"./useObserver\"\n\ninterface IObserverProps {\n    children?(): React.ReactElement | null\n    render?(): React.ReactElement | null\n}\n\nfunction ObserverComponent({ children, render }: IObserverProps) {\n    const component = children || render\n    if (typeof component !== \"function\") {\n        return null\n    }\n    return useObserver(component)\n}\nif (\"production\" !== process.env.NODE_ENV) {\n    ObserverComponent.propTypes = {\n        children: ObserverPropsCheck,\n        render: ObserverPropsCheck\n    }\n}\nObserverComponent.displayName = \"Observer\"\n\nexport { ObserverComponent as Observer }\n\nfunction ObserverPropsCheck(\n    props: { [k: string]: any },\n    key: string,\n    componentName: string,\n    location: any,\n    propFullName: string\n) {\n    const extraKey = key === \"children\" ? \"render\" : \"children\"\n    const hasProp = typeof props[key] === \"function\"\n    const hasExtraProp = typeof props[extraKey] === \"function\"\n    if (hasProp && hasExtraProp) {\n        return new Error(\n            \"MobX Observer: Do not use children and render in the same time in`\" + componentName\n        )\n    }\n\n    if (hasProp || hasExtraProp) {\n        return null\n    }\n    return new Error(\n        \"Invalid prop `\" +\n            propFullName +\n            \"` of type `\" +\n            typeof props[key] +\n            \"` supplied to\" +\n            \" `\" +\n            componentName +\n            \"`, expected `function`.\"\n    )\n}\n","import { observable, AnnotationsMap } from \"mobx\"\nimport { useState } from \"react\"\n\nexport function useLocalObservable<TStore extends Record<string, any>>(\n    initializer: () => TStore,\n    annotations?: AnnotationsMap<TStore, never>\n): TStore {\n    return useState(() => observable(initializer(), annotations, { autoBind: true }))[0]\n}\n","import { useDeprecated } from \"./utils/utils\"\nimport { observable, runInAction } from \"mobx\"\nimport { useState } from \"react\"\n\nexport function useAsObservableSource<TSource>(current: TSource): TSource {\n    if (\"production\" !== process.env.NODE_ENV)\n        useDeprecated(\n            \"[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.\"\n        )\n    const [res] = useState(() => observable(current, {}, { deep: false }))\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n","import { observable } from \"mobx\"\nimport { useState } from \"react\"\n\nimport { useDeprecated } from \"./utils/utils\"\nimport { useAsObservableSource } from \"./useAsObservableSource\"\n\nexport function useLocalStore<TStore extends Record<string, any>>(initializer: () => TStore): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source: TSource) => TStore,\n    current: TSource\n): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source?: TSource) => TStore,\n    current?: TSource\n): TStore {\n    if (\"production\" !== process.env.NODE_ENV)\n        useDeprecated(\n            \"[mobx-react-lite] 'useLocalStore' is deprecated, use 'useLocalObservable' instead.\"\n        )\n    const source = current && useAsObservableSource(current)\n    return useState(() => observable(initializer(source), undefined, { autoBind: true }))[0]\n}\n","import \"./utils/assertEnvironment\"\n\nimport { unstable_batchedUpdates as batch } from \"./utils/reactBatchedUpdates\"\nimport { observerBatching } from \"./utils/observerBatching\"\nimport { useDeprecated } from \"./utils/utils\"\nimport { useObserver as useObserverOriginal } from \"./useObserver\"\nimport { enableStaticRendering } from \"./staticRendering\"\n\nobserverBatching(batch)\n\nexport { isUsingStaticRendering, enableStaticRendering } from \"./staticRendering\"\nexport { observer, IObserverOptions } from \"./observer\"\nexport { Observer } from \"./ObserverComponent\"\nexport { useLocalObservable } from \"./useLocalObservable\"\nexport { useLocalStore } from \"./useLocalStore\"\nexport { useAsObservableSource } from \"./useAsObservableSource\"\n\nexport function useObserver<T>(fn: () => T, baseComponentName: string = \"observed\"): T {\n    if (\"production\" !== process.env.NODE_ENV) {\n        useDeprecated(\n            \"[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`.\"\n        )\n    }\n    return useObserverOriginal(fn, baseComponentName)\n}\n\nexport { isObserverBatched, observerBatching } from \"./utils/observerBatching\"\n\nexport function useStaticRendering(enable: boolean) {\n    if (\"production\" !== process.env.NODE_ENV) {\n        console.warn(\n            \"[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead\"\n        )\n    }\n    enableStaticRendering(enable)\n}\n"],"names":["useState","Error","makeObservable","defaultNoopBatch","callback","observerBatching","reactionScheduler","console","warn","configure","isObserverBatched","EMPTY_ARRAY","useForceUpdate","setTick","update","useCallback","tick","deprecatedMessages","useDeprecated","msg","includes","push","printDebugValue","v","getDependencyTree","createTrackingData","reaction","trackingData","mounted","changedBeforeMount","cleanAt","Date","now","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","CLEANUP_TIMER_LOOP_MILLIS","uncommittedReactionRefs","Set","reactionCleanupHandle","ensureCleanupTimerRunning","undefined","setTimeout","cleanUncommittedReactions","scheduleCleanupOfReactionIfLeaked","ref","add","recordReactionAsCommitted","reactionRef","delete","forEach","tracking","current","dispose","size","globalIsUsingStaticRendering","enableStaticRendering","enable","isUsingStaticRendering","observerComponentNameFor","baseComponentName","useObserver","fn","forceUpdate","reactionTrackingRef","React","useRef","newReaction","Reaction","useDebugValue","useEffect","Infinity","rendering","exception","track","e","observer","baseComponent","options","realOptions","forwardRef","displayName","name","wrappedComponent","props","memoComponent","memo","copyStaticProperties","hoistBlackList","$$typeof","render","compare","type","base","target","Object","keys","key","defineProperty","getOwnPropertyDescriptor","ObserverComponent","children","component","propTypes","ObserverPropsCheck","componentName","location","propFullName","extraKey","hasProp","hasExtraProp","useLocalObservable","initializer","annotations","observable","autoBind","useAsObservableSource","deep","res","runInAction","assign","useLocalStore","source","batch","useObserverOriginal","useStaticRendering"],"mappings":";;;;;;;;IAGA,IAAI,CAACA,cAAL,EAAe;IACX,QAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;IACH;;IACD,IAAI,CAACC,mBAAL,EAAqB;IACjB,QAAM,IAAID,KAAJ,CAAU,oEAAV,CAAN;IACH;;aCNeE,iBAAiBC;IAC7BA,EAAAA,QAAQ;IACX;AAED,aAAgBC,iBAAiBC;IAC7B,MAAI,CAACA,iBAAL,EAAwB;IACpBA,IAAAA,iBAAiB,GAAGH,gBAApB;;IACA,IAA2C;IACvCI,MAAAA,OAAO,CAACC,IAAR,CACI,6EADJ;IAGH;IACJ;;IACDC,EAAAA,cAAS,CAAC;IAAEH,IAAAA,iBAAiB,EAAjBA;IAAF,GAAD,CAAT;IACH;AAED,QAAaI,iBAAiB,GAAG,SAApBA,iBAAoB;IAC7B,EAA2C;IACvCH,IAAAA,OAAO,CAACC,IAAR,CAAa,mBAAb;IACH;;IAED,SAAO,IAAP;IACH,CANM;;IChBP,IAAMG,WAAW,GAAU,EAA3B;AAEA,aAAgBC;sBACQZ,cAAQ,CAAC,CAAD;UAAnBa;;IAET,MAAMC,MAAM,GAAGC,iBAAW,CAAC;IACvBF,IAAAA,OAAO,CAAC,UAAAG,IAAI;IAAA,aAAIA,IAAI,GAAG,CAAX;IAAA,KAAL,CAAP;IACH,GAFyB,EAEvBL,WAFuB,CAA1B;IAIA,SAAOG,MAAP;IACH;IAED,IAAMG,kBAAkB,GAAa,EAArC;AAEA,aAAgBC,cAAcC;IAC1B,MAAI,CAACF,kBAAkB,CAACG,QAAnB,CAA4BD,GAA5B,CAAL,EAAuC;IACnCF,IAAAA,kBAAkB,CAACI,IAAnB,CAAwBF,GAAxB;IACAZ,IAAAA,OAAO,CAACC,IAAR,CAAaW,GAAb;IACH;IACJ;;aCnBeG,gBAAgBC;IAC5B,SAAOC,sBAAiB,CAACD,CAAD,CAAxB;IACH;;aCoBeE,mBAAmBC;IAC/B,MAAMC,YAAY,GAAsB;IACpCD,IAAAA,QAAQ,EAARA,QADoC;IAEpCE,IAAAA,OAAO,EAAE,KAF2B;IAGpCC,IAAAA,kBAAkB,EAAE,KAHgB;IAIpCC,IAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,KAAaC;IAJc,GAAxC;IAMA,SAAON,YAAP;IACH;IAED;;;;;;;AAMA,IAAO,IAAMM,qCAAqC,GAAG,KAA9C;IAEP;;;;AAGA,IAAO,IAAMC,yBAAyB,GAAG,KAAlC;IAEP;;;;IAGA,IAAMC,uBAAuB;IAAA;IAA0D,IAAIC,GAAJ,EAAvF;IAEA;;;;IAGA,IAAIC,qBAAJ;;IAEA,SAASC,yBAAT;IACI,MAAID,qBAAqB,KAAKE,SAA9B,EAAyC;IACrCF,IAAAA,qBAAqB,GAAGG,UAAU,CAACC,yBAAD,EAA4BP,yBAA5B,CAAlC;IACH;IACJ;;AAED,aAAgBQ,kCACZC;IAEAR,EAAAA,uBAAuB,CAACS,GAAxB,CAA4BD,GAA5B;IAEAL,EAAAA,yBAAyB;IAC5B;AAED,aAAgBO,0BACZC;IAEAX,EAAAA,uBAAuB,CAACY,MAAxB,CAA+BD,WAA/B;IACH;IAED;;;;IAGA,SAASL,yBAAT;IACIJ,EAAAA,qBAAqB,GAAGE,SAAxB;IAGA;;IAEA,MAAMP,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAZ;IACAG,EAAAA,uBAAuB,CAACa,OAAxB,CAAgC,UAAAL,GAAG;IAC/B,QAAMM,QAAQ,GAAGN,GAAG,CAACO,OAArB;;IACA,QAAID,QAAJ,EAAc;IACV,UAAIjB,GAAG,IAAIiB,QAAQ,CAACnB,OAApB,EAA6B;IACzB;IACAmB,QAAAA,QAAQ,CAACvB,QAAT,CAAkByB,OAAlB;IACAR,QAAAA,GAAG,CAACO,OAAJ,GAAc,IAAd;IACAf,QAAAA,uBAAuB,CAACY,MAAxB,CAA+BJ,GAA/B;IACH;IACJ;IACJ,GAVD;;IAYA,MAAIR,uBAAuB,CAACiB,IAAxB,GAA+B,CAAnC,EAAsC;IAClC;IACA;IACAd,IAAAA,yBAAyB;IAC5B;IACJ;;ICxGD,IAAIe,4BAA4B,GAAG,KAAnC;AAEA,aAAgBC,sBAAsBC;IAClCF,EAAAA,4BAA4B,GAAGE,MAA/B;IACH;AAED,aAAgBC;IACZ,SAAOH,4BAAP;IACH;;ICKD,SAASI,wBAAT,CAAkCC,iBAAlC;IACI,sBAAkBA,iBAAlB;IACH;;AAED,aAAgBC,YAAeC,IAAaF;UAAAA;IAAAA,IAAAA,oBAA4B;;;IACpE,MAAIF,sBAAsB,EAA1B,EAA8B;IAC1B,WAAOI,EAAE,EAAT;IACH;;IAED,MAAMC,WAAW,GAAGjD,cAAc,EAAlC;IAGA;IACA;;IACA,MAAMkD,mBAAmB,GAAGC,cAAK,CAACC,MAAN,CAAuC,IAAvC,CAA5B;;IAEA,MAAI,CAACF,mBAAmB,CAACZ,OAAzB,EAAkC;IAC9B;IACA;IAEA,QAAMe,WAAW,GAAG,IAAIC,aAAJ,CAAaT,wBAAwB,CAACC,iBAAD,CAArC,EAA0D;IAC1E;IACA;IACA;IACA;IACA;IACA,UAAI/B,YAAY,CAACC,OAAjB,EAA0B;IACtB;IACAiC,QAAAA,WAAW;IACd,OAHD,MAGO;IACH;IACA;IACAlC,QAAAA,YAAY,CAACE,kBAAb,GAAkC,IAAlC;IACH;IACJ,KAdmB,CAApB;IAgBA,QAAMF,YAAY,GAAGF,kBAAkB,CAACwC,WAAD,CAAvC;IACAH,IAAAA,mBAAmB,CAACZ,OAApB,GAA8BvB,YAA9B;IACAe,IAAAA,iCAAiC,CAACoB,mBAAD,CAAjC;IACH;;UAEOpC,WAAaoC,mBAAmB,CAACZ,QAAjCxB;IACRqC,EAAAA,cAAK,CAACI,aAAN,CAAoBzC,QAApB,EAA8BJ,eAA9B;IAEAyC,EAAAA,cAAK,CAACK,SAAN,CAAgB;IACZ;IACAvB,IAAAA,yBAAyB,CAACiB,mBAAD,CAAzB;;IAEA,QAAIA,mBAAmB,CAACZ,OAAxB,EAAiC;IAC7B;IACA;IACA;IACAY,MAAAA,mBAAmB,CAACZ,OAApB,CAA4BtB,OAA5B,GAAsC,IAAtC,CAJ6B;;IAM7B,UAAIkC,mBAAmB,CAACZ,OAApB,CAA4BrB,kBAAhC,EAAoD;IAChDiC,QAAAA,mBAAmB,CAACZ,OAApB,CAA4BrB,kBAA5B,GAAiD,KAAjD;IACAgC,QAAAA,WAAW;IACd;IACJ,KAVD,MAUO;IACH;IACA;IACA;IACA;IAEA;IACAC,MAAAA,mBAAmB,CAACZ,OAApB,GAA8B;IAC1BxB,QAAAA,QAAQ,EAAE,IAAIwC,aAAJ,CAAaT,wBAAwB,CAACC,iBAAD,CAArC,EAA0D;IAChE;IACAG,UAAAA,WAAW;IACd,SAHS,CADgB;IAK1BjC,QAAAA,OAAO,EAAE,IALiB;IAM1BC,QAAAA,kBAAkB,EAAE,KANM;IAO1BC,QAAAA,OAAO,EAAEuC;IAPiB,OAA9B;IASAR,MAAAA,WAAW;IACd;;IAED,WAAO;IACHC,MAAAA,mBAAmB,CAACZ,OAApB,CAA6BxB,QAA7B,CAAsCyB,OAAtC;IACAW,MAAAA,mBAAmB,CAACZ,OAApB,GAA8B,IAA9B;IACH,KAHD;IAIH,GArCD,EAqCG,EArCH;IAwCA;IACA;;IACA,MAAIoB,SAAJ;IACA,MAAIC,SAAJ;IACA7C,EAAAA,QAAQ,CAAC8C,KAAT,CAAe;IACX,QAAI;IACAF,MAAAA,SAAS,GAAGV,EAAE,EAAd;IACH,KAFD,CAEE,OAAOa,CAAP,EAAU;IACRF,MAAAA,SAAS,GAAGE,CAAZ;IACH;IACJ,GAND;;IAQA,MAAIF,SAAJ,EAAe;IACX,UAAMA,SAAN,CADW;IAEd;;IAED,SAAOD,SAAP;IACH;;;;;;;;;;;;;;;;;;;;aC3EeI,SACZC,eACAC;IAEA;IACA,MAAIpB,sBAAsB,EAA1B,EAA8B;IAC1B,WAAOmB,aAAP;IACH;;IAED,MAAME,WAAW;IACbC,IAAAA,UAAU,EAAE;IADC,KAEVF,OAFU,CAAjB;;IAKA,MAAMlB,iBAAiB,GAAGiB,aAAa,CAACI,WAAd,IAA6BJ,aAAa,CAACK,IAArE;;IAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAWvC,GAAX;IACrB,WAAOgB,WAAW,CAAC;IAAA,aAAMgB,aAAa,CAACO,KAAD,EAAQvC,GAAR,CAAnB;IAAA,KAAD,EAAkCe,iBAAlC,CAAlB;IACH,GAFD;;IAGAuB,EAAAA,gBAAgB,CAACF,WAAjB,GAA+BrB,iBAA/B;IAGA;IACA;;IACA,MAAIyB,aAAJ;;IACA,MAAIN,WAAW,CAACC,UAAhB,EAA4B;IACxB;IACA;IACA;IACA;IACAK,IAAAA,aAAa,GAAGC,UAAI,CAACN,gBAAU,CAACG,gBAAD,CAAX,CAApB;IACH,GAND,MAMO;IACHE,IAAAA,aAAa,GAAGC,UAAI,CAACH,gBAAD,CAApB;IACH;;IAEDI,EAAAA,oBAAoB,CAACV,aAAD,EAAgBQ,aAAhB,CAApB;IACAA,EAAAA,aAAa,CAACJ,WAAd,GAA4BrB,iBAA5B;IAEA,SAAOyB,aAAP;IACH;;IAGD,IAAMG,cAAc,GAAQ;IACxBC,EAAAA,QAAQ,EAAE,IADc;IAExBC,EAAAA,MAAM,EAAE,IAFgB;IAGxBC,EAAAA,OAAO,EAAE,IAHe;IAIxBC,EAAAA,IAAI,EAAE;IAJkB,CAA5B;;IAOA,SAASL,oBAAT,CAA8BM,IAA9B,EAAyCC,MAAzC;IACIC,EAAAA,MAAM,CAACC,IAAP,CAAYH,IAAZ,EAAkB3C,OAAlB,CAA0B,UAAA+C,GAAG;IACzB,QAAI,CAACT,cAAc,CAACS,GAAD,CAAnB,EAA0B;IACtBF,MAAAA,MAAM,CAACG,cAAP,CAAsBJ,MAAtB,EAA8BG,GAA9B,EAAmCF,MAAM,CAACI,wBAAP,CAAgCN,IAAhC,EAAsCI,GAAtC,CAAnC;IACH;IACJ,GAJD;IAKH;;ICvFD,SAASG,iBAAT;UAA6BC,gBAAAA;UAAUX,cAAAA;IACnC,MAAMY,SAAS,GAAGD,QAAQ,IAAIX,MAA9B;;IACA,MAAI,OAAOY,SAAP,KAAqB,UAAzB,EAAqC;IACjC,WAAO,IAAP;IACH;;IACD,SAAOzC,WAAW,CAACyC,SAAD,CAAlB;IACH;;AACD,IAA2C;IACvCF,EAAAA,iBAAiB,CAACG,SAAlB,GAA8B;IAC1BF,IAAAA,QAAQ,EAAEG,kBADgB;IAE1Bd,IAAAA,MAAM,EAAEc;IAFkB,GAA9B;IAIH;;IACDJ,iBAAiB,CAACnB,WAAlB,GAAgC,UAAhC;AAEA;IAEA,SAASuB,kBAAT,CACIpB,KADJ,EAEIa,GAFJ,EAGIQ,aAHJ,EAIIC,QAJJ,EAKIC,YALJ;IAOI,MAAMC,QAAQ,GAAGX,GAAG,KAAK,UAAR,GAAqB,QAArB,GAAgC,UAAjD;IACA,MAAMY,OAAO,GAAG,OAAOzB,KAAK,CAACa,GAAD,CAAZ,KAAsB,UAAtC;IACA,MAAMa,YAAY,GAAG,OAAO1B,KAAK,CAACwB,QAAD,CAAZ,KAA2B,UAAhD;;IACA,MAAIC,OAAO,IAAIC,YAAf,EAA6B;IACzB,WAAO,IAAI3G,KAAJ,CACH,uEAAuEsG,aADpE,CAAP;IAGH;;IAED,MAAII,OAAO,IAAIC,YAAf,EAA6B;IACzB,WAAO,IAAP;IACH;;IACD,SAAO,IAAI3G,KAAJ,CACH,mBACIwG,YADJ,GAEI,aAFJ,GAGI,OAAOvB,KAAK,CAACa,GAAD,CAHhB,GAII,eAJJ,GAKI,IALJ,GAMIQ,aANJ,GAOI,yBARD,CAAP;IAUH;;aClDeM,mBACZC,aACAC;IAEA,SAAO/G,cAAQ,CAAC;IAAA,WAAMgH,eAAU,CAACF,WAAW,EAAZ,EAAgBC,WAAhB,EAA6B;IAAEE,MAAAA,QAAQ,EAAE;IAAZ,KAA7B,CAAhB;IAAA,GAAD,CAAR,CAA2E,CAA3E,CAAP;IACH;;aCJeC,sBAA+BhE;IAC3C,EACIhC,aAAa,CACT,4OADS,CAAb;;sBAGUlB,cAAQ,CAAC;IAAA,WAAMgH,eAAU,CAAC9D,OAAD,EAAU,EAAV,EAAc;IAAEiE,MAAAA,IAAI,EAAE;IAAR,KAAd,CAAhB;IAAA,GAAD;UAAfC;;IACPC,EAAAA,gBAAW,CAAC;IACRxB,IAAAA,MAAM,CAACyB,MAAP,CAAcF,GAAd,EAAmBlE,OAAnB;IACH,GAFU,CAAX;IAGA,SAAOkE,GAAP;IACH;;aCHeG,cACZT,aACA5D;IAEA,EACIhC,aAAa,CACT,oFADS,CAAb;IAGJ,MAAMsG,MAAM,GAAGtE,OAAO,IAAIgE,qBAAqB,CAAChE,OAAD,CAA/C;IACA,SAAOlD,cAAQ,CAAC;IAAA,WAAMgH,eAAU,CAACF,WAAW,CAACU,MAAD,CAAZ,EAAsBjF,SAAtB,EAAiC;IAAE0E,MAAAA,QAAQ,EAAE;IAAZ,KAAjC,CAAhB;IAAA,GAAD,CAAR,CAA+E,CAA/E,CAAP;IACH;;ICbD5G,gBAAgB,CAACoH,gCAAD,CAAhB;AAEA,aAOgB9D,cAAeC,IAAaF;UAAAA;IAAAA,IAAAA,oBAA4B;;;IACpE,EAA2C;IACvCxC,IAAAA,aAAa,CACT,yIADS,CAAb;IAGH;;IACD,SAAOwG,WAAmB,CAAC9D,EAAD,EAAKF,iBAAL,CAA1B;IACH;AAED,aAEgBiE,mBAAmBpE;IAC/B,EAA2C;IACvChD,IAAAA,OAAO,CAACC,IAAR,CACI,2FADJ;IAGH;;IACD8C,EAAAA,qBAAqB,CAACC,MAAD,CAArB;IACH;;;;;;;;;;;;;;;;;;;;;;"}