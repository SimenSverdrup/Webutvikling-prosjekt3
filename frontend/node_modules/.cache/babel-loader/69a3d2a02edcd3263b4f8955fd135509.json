{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simen\\\\Documents\\\\A_Studier\\\\Webutvikling\\\\prosjekt-3\\\\frontend\\\\src\\\\components\\\\MovieList\\\\MovieList.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport MovieBox from '../MovieBox/MovieBox';\nimport { observer } from \"mobx-react\";\nimport { useStore } from '../../mobx/store';\n\nconst MovieList = () => {\n  //const [numberOfMovies, setNumberOfMovies] = useState(5);\n  const [movies, setMovies] = useState([]);\n  const store = useStore(); //const { search_string } = store;\n\n  useEffect(() => {\n    console.log(\"MovieList render! Search string is now: \" + store.search_string);\n\n    if (store.search_string) {\n      // non-empty search string -> search for the specified title\n      console.log(\"non-empty search string: \" + store.search_string);\n      fetch(\"http://localhost:3000/api/movies/title/\" + store.search_string, {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    } else {\n      // empty search string -> get all movies\n      console.log(\"empty search string\");\n      fetch(\"http://localhost:3000/api/movies/\", {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    }\n  }, [store.search_string]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"ul\", {\n    key: movie[\"_id\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MovieBox, {\n    id: movie[\"_id\"],\n    title: movie[\"title\"],\n    duration: movie[\"duration\"],\n    genres: movie[\"genres\"],\n    imgUrl: movie[\"posterurl\"],\n    year: movie[\"year\"],\n    imdbRating: movie[\"imdbRating\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default observer(MovieList);","map":{"version":3,"sources":["C:/Users/simen/Documents/A_Studier/Webutvikling/prosjekt-3/frontend/src/components/MovieList/MovieList.tsx"],"names":["React","useEffect","useState","MovieBox","observer","useStore","MovieList","movies","setMovies","store","console","log","search_string","fetch","method","then","res","json","catch","error","map","movie"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAAeC,QAAf,QAA8B,kBAA9B;;AAIA,MAAMC,SAAS,GAAG,MAAM;AACpB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMO,KAAK,GAAGJ,QAAQ,EAAtB,CAHoB,CAIpB;;AAGAJ,EAAAA,SAAS,CAAE,MAAM;AACbS,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAA6CF,KAAK,CAACG,aAA/D;;AACA,QAAIH,KAAK,CAACG,aAAV,EAAyB;AACrB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BF,KAAK,CAACG,aAAhD;AAECC,MAAAA,KAAK,CAAC,4CAA4CJ,KAAK,CAACG,aAAnD,EACF;AACIE,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVT,QAAAA,SAAS,CAACS,IAAD,CAAT;AACH,OAPJ,EAQIC,KARJ,CAQUC,KAAK,IAAI;AACZT,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAVJ;AAWJ,KAfD,MAgBK;AACD;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAECE,MAAAA,KAAK,CAAC,mCAAD,EACF;AACIC,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVT,QAAAA,SAAS,CAACS,IAAD,CAAT;AACH,OAPJ,EAQIC,KARJ,CAQUC,KAAK,IAAI;AACZT,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAVJ;AAWJ;AACJ,GAlCQ,EAkCN,CAACF,KAAK,CAACG,aAAP,CAlCM,CAAT;AAqCA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACML,MAAM,CAACa,GAAP,CAAYC,KAAK,iBACf;AAAI,IAAA,GAAG,EAAEA,KAAK,CAAC,KAAD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAEA,KAAK,CAAC,KAAD,CAAnB;AAA4B,IAAA,KAAK,EAAEA,KAAK,CAAC,OAAD,CAAxC;AACU,IAAA,QAAQ,EAAEA,KAAK,CAAC,UAAD,CADzB;AAEU,IAAA,MAAM,EAAEA,KAAK,CAAC,QAAD,CAFvB;AAGU,IAAA,MAAM,EAAEA,KAAK,CAAC,WAAD,CAHvB;AAIU,IAAA,IAAI,EAAEA,KAAK,CAAC,MAAD,CAJrB;AAKU,IAAA,UAAU,EAAEA,KAAK,CAAC,YAAD,CAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADF,CADN,CADJ;AAeH,CA3DD;;AA8DA,eAAejB,QAAQ,CAACE,SAAD,CAAvB","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport MovieBox from '../MovieBox/MovieBox';\r\nimport { observer } from \"mobx-react\"\r\nimport Store, {useStore} from '../../mobx/store'\r\n\r\n\r\n\r\nconst MovieList = () => {\r\n    //const [numberOfMovies, setNumberOfMovies] = useState(5);\r\n    const [movies, setMovies] = useState([]);\r\n    const store = useStore();\r\n    //const { search_string } = store;\r\n\r\n\r\n    useEffect( () => {\r\n        console.log(\"MovieList render! Search string is now: \" + store.search_string);\r\n        if (store.search_string) {\r\n            // non-empty search string -> search for the specified title\r\n            console.log(\"non-empty search string: \" + store.search_string);\r\n\r\n             fetch(\"http://localhost:3000/api/movies/title/\" + store.search_string,\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    setMovies(json);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n        else {\r\n            // empty search string -> get all movies\r\n            console.log(\"empty search string\");\r\n\r\n             fetch(\"http://localhost:3000/api/movies/\",\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    setMovies(json);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n    }, [store.search_string]);\r\n\r\n\r\n    return(\r\n        <div>\r\n            { movies.map( movie =>\r\n                <ul key={movie[\"_id\"]}>\r\n                    <MovieBox id={movie[\"_id\"]} title={movie[\"title\"]}\r\n                              duration={movie[\"duration\"]}\r\n                              genres={movie[\"genres\"]}\r\n                              imgUrl={movie[\"posterurl\"]}\r\n                              year={movie[\"year\"]}\r\n                              imdbRating={movie[\"imdbRating\"]}\r\n                    />\r\n                </ul>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(MovieList);"]},"metadata":{},"sourceType":"module"}