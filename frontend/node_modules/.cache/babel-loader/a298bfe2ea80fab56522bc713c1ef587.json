{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simen\\\\Documents\\\\A_Studier\\\\Webutvikling\\\\prosjekt-3\\\\frontend\\\\src\\\\components\\\\MovieList\\\\MovieList.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport Store from '../../mobx/store';\n\nconst MovieList = () => {\n  const startState = {\n    title: \"\",\n    year: 0,\n    genres: [],\n    storyline: \"\",\n    posterurl: \"\",\n    imdbRating: 0,\n    actors: [],\n    rating: 0\n  };\n  const [isLoading, setLoading] = useState(true);\n  const [numberOfMovies, setNumberOfMovies] = useState(5);\n  let movies = [[]];\n  const store = useContext(Store);\n  const {\n    states\n  } = store;\n  useEffect(() => {\n    setLoading(true);\n\n    if (states[0].search_string) {\n      // non-empty search string -> search for the specified title\n      console.log(\"non-empty search string: \" + states[0].search_string);\n      fetch(\"http://localhost:3000/api/movies/title/\" + states[0].search_string, {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        movies.push(json);\n        movies.shift();\n        setLoading(false);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    } else {\n      // empty search string -> get all movies\n      console.log(\"empty search string\");\n      fetch(\"http://localhost:3000/api/movies/\", {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        movies.push(json);\n        movies.shift();\n      }).finally(() => setLoading(false)).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    }\n  }, []);\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 16\n      }\n    }, \"Loading...\");\n  } else {\n    console.log(movies);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default observer(MovieList);\n/*\r\n{ movies[0].map( movie =>\r\n                <li key={movie.title}>\r\n                    <MovieBox id={movie._id} movieTitle={movie.title} duration={movie.duration} genres={movie.genres} imgUrl={movie.posterurl} year={movie.year}/>\r\n                </li>\r\n            )}\r\n */","map":{"version":3,"sources":["C:/Users/simen/Documents/A_Studier/Webutvikling/prosjekt-3/frontend/src/components/MovieList/MovieList.tsx"],"names":["React","useContext","useEffect","useState","observer","Store","MovieList","startState","title","year","genres","storyline","posterurl","imdbRating","actors","rating","isLoading","setLoading","numberOfMovies","setNumberOfMovies","movies","store","states","search_string","console","log","fetch","method","then","res","json","push","shift","catch","error","finally"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAGA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAMC,UAAU,GAAG;AACfC,IAAAA,KAAK,EAAE,EADQ;AAEfC,IAAAA,IAAI,EAAE,CAFS;AAGfC,IAAAA,MAAM,EAAE,EAHO;AAIfC,IAAAA,SAAS,EAAE,EAJI;AAKfC,IAAAA,SAAS,EAAE,EALI;AAMfC,IAAAA,UAAU,EAAE,CANG;AAOfC,IAAAA,MAAM,EAAE,EAPO;AAQfC,IAAAA,MAAM,EAAE;AARO,GAAnB;AAWA,QAAM,CAACC,SAAD,EAAYC,UAAZ,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,CAAD,CAApD;AACA,MAAIiB,MAAM,GAAG,CAAC,EAAD,CAAb;AACA,QAAMC,KAAK,GAAGpB,UAAU,CAACI,KAAD,CAAxB;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAaD,KAAnB;AAEAnB,EAAAA,SAAS,CAAE,MAAM;AACbe,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAIK,MAAM,CAAC,CAAD,CAAN,CAAUC,aAAd,EAA6B;AACzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BH,MAAM,CAAC,CAAD,CAAN,CAAUC,aAApD;AAECG,MAAAA,KAAK,CAAC,4CAA4CJ,MAAM,CAAC,CAAD,CAAN,CAAUC,aAAvD,EACF;AACII,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVV,QAAAA,MAAM,CAACW,IAAP,CAAYD,IAAZ;AACAV,QAAAA,MAAM,CAACY,KAAP;AACAf,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OATJ,EAUIgB,KAVJ,CAUUC,KAAK,IAAI;AACZV,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAZJ;AAaJ,KAjBD,MAkBK;AACD;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAECC,MAAAA,KAAK,CAAC,mCAAD,EACF;AACIC,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVV,QAAAA,MAAM,CAACW,IAAP,CAAYD,IAAZ;AACAV,QAAAA,MAAM,CAACY,KAAP;AACH,OARJ,EASKG,OATL,CASa,MAAMlB,UAAU,CAAC,KAAD,CAT7B,EAUIgB,KAVJ,CAUUC,KAAK,IAAI;AACZV,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAZJ;AAaJ;AACJ,GAtCQ,EAsCN,EAtCM,CAAT;;AAwCA,MAAIT,SAAJ,EAAe;AACX,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,GAFD,MAGK;AACDQ,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACH;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CAtED;;AAyEA,eAAehB,QAAQ,CAACE,SAAD,CAAvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport MovieBox from '../MovieBox/MovieBox';\r\nimport { observer } from \"mobx-react-lite\"\r\nimport Store from '../../mobx/store'\r\n\r\n\r\nconst MovieList = () => {\r\n    const startState = {\r\n        title: \"\",\r\n        year: 0,\r\n        genres: [],\r\n        storyline: \"\",\r\n        posterurl: \"\",\r\n        imdbRating: 0,\r\n        actors: [],\r\n        rating: 0\r\n    };\r\n\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [numberOfMovies, setNumberOfMovies] = useState(5);\r\n    let movies = [[]];\r\n    const store = useContext(Store);\r\n    const { states } = store;\r\n\r\n    useEffect( () => {\r\n        setLoading(true);\r\n        if (states[0].search_string) {\r\n            // non-empty search string -> search for the specified title\r\n            console.log(\"non-empty search string: \" + states[0].search_string);\r\n\r\n             fetch(\"http://localhost:3000/api/movies/title/\" + states[0].search_string,\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    movies.push(json)\r\n                    movies.shift();\r\n                    setLoading(false);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n        else {\r\n            // empty search string -> get all movies\r\n            console.log(\"empty search string\");\r\n\r\n             fetch(\"http://localhost:3000/api/movies/\",\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    movies.push(json)\r\n                    movies.shift();\r\n                })\r\n                 .finally(() => setLoading(false))\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <div>Loading...</div>\r\n    }\r\n    else {\r\n        console.log(movies);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(MovieList);\r\n\r\n\r\n/*\r\n{ movies[0].map( movie =>\r\n                <li key={movie.title}>\r\n                    <MovieBox id={movie._id} movieTitle={movie.title} duration={movie.duration} genres={movie.genres} imgUrl={movie.posterurl} year={movie.year}/>\r\n                </li>\r\n            )}\r\n */"]},"metadata":{},"sourceType":"module"}