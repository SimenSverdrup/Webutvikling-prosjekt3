{"ast":null,"code":"var _jsxFileName = \"/Users/TheoHolmsen/Documents/webutvikling-prosjekt-3/frontend/src/components/MovieList/MovieList.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport MovieBox from '../MovieBox/MovieBox';\nimport { observer } from 'mobx-react';\nimport Store from '../../mobx/store';\n\nconst MovieList = () => {\n  //const [numberOfMovies, setNumberOfMovies] = useState(5);\n  const [movies, setMovies] = useState([]);\n  const store = useContext(Store);\n  const {\n    search_string\n  } = store;\n  useEffect(() => {\n    if (search_string) {\n      // non-empty search string -> search for the specified title\n      fetch(\"http://localhost:3000/api/movies/title/\" + search_string, {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    } else {\n      // empty search string -> get all movies\n      fetch(\"http://localhost:3000/api/movies/\", {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    }\n  }, [search_string, movies]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"movieList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"ul\", {\n    key: movie[\"_id\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MovieBox, {\n    id: movie[\"_id\"],\n    title: movie[\"title\"],\n    duration: movie[\"duration\"],\n    genres: movie[\"genres\"],\n    imgUrl: movie[\"posterurl\"],\n    year: movie[\"year\"],\n    imdbRating: movie[\"imdbRating\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default observer(MovieList);","map":{"version":3,"sources":["/Users/TheoHolmsen/Documents/webutvikling-prosjekt-3/frontend/src/components/MovieList/MovieList.tsx"],"names":["React","useContext","useEffect","useState","MovieBox","observer","Store","MovieList","movies","setMovies","store","search_string","fetch","method","then","res","json","catch","error","console","log","map","movie"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAIA,MAAMC,SAAS,GAAG,MAAM;AACpB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMO,KAAK,GAAGT,UAAU,CAACK,KAAD,CAAxB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAoBD,KAA1B;AAGAR,EAAAA,SAAS,CAAE,MAAM;AACb,QAAIS,aAAJ,EAAmB;AACf;AACCC,MAAAA,KAAK,CAAC,4CAA4CD,aAA7C,EACF;AACIE,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVP,QAAAA,SAAS,CAACO,IAAD,CAAT;AACH,OAPJ,EAQIC,KARJ,CAQUC,KAAK,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAVJ;AAWJ,KAbD,MAcK;AACD;AACCR,MAAAA,KAAK,CAAC,mCAAD,EACF;AACIC,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVP,QAAAA,SAAS,CAACO,IAAD,CAAT;AACH,OAPJ,EAQIC,KARJ,CAQUC,KAAK,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAVJ;AAWJ;AACJ,GA7BQ,EA6BN,CAACT,aAAD,EAAgBH,MAAhB,CA7BM,CAAT;AAgCA,sBACI;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMA,MAAM,CAACa,GAAP,CAAYC,KAAK,iBACf;AAAI,IAAA,GAAG,EAAEA,KAAK,CAAC,KAAD,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAEA,KAAK,CAAC,KAAD,CAAnB;AAA4B,IAAA,KAAK,EAAEA,KAAK,CAAC,OAAD,CAAxC;AACU,IAAA,QAAQ,EAAEA,KAAK,CAAC,UAAD,CADzB;AAEU,IAAA,MAAM,EAAEA,KAAK,CAAC,QAAD,CAFvB;AAGU,IAAA,MAAM,EAAEA,KAAK,CAAC,WAAD,CAHvB;AAIU,IAAA,IAAI,EAAEA,KAAK,CAAC,MAAD,CAJrB;AAKU,IAAA,UAAU,EAAEA,KAAK,CAAC,YAAD,CAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADF,CADN,CADJ;AAeH,CAtDD;;AAyDA,eAAejB,QAAQ,CAACE,SAAD,CAAvB","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport MovieBox from '../MovieBox/MovieBox';\nimport { observer } from 'mobx-react';\nimport Store from '../../mobx/store';\n\n\n\nconst MovieList = () => {\n    //const [numberOfMovies, setNumberOfMovies] = useState(5);\n    const [movies, setMovies] = useState([]);\n    const store = useContext(Store);\n    const { search_string } = store;\n\n\n    useEffect( () => {\n        if (search_string) {\n            // non-empty search string -> search for the specified title\n             fetch(\"http://localhost:3000/api/movies/title/\" + search_string,\n                {\n                    method: 'GET'\n                })\n                .then(res => res.json())\n                .then(json => {\n                    setMovies(json);\n                })\n                .catch(error => {\n                    console.log('Could not get movies from DB');\n                });\n        }\n        else {\n            // empty search string -> get all movies\n             fetch(\"http://localhost:3000/api/movies/\",\n                {\n                    method: 'GET'\n                })\n                .then(res => res.json())\n                .then(json => {\n                    setMovies(json);\n                })\n                .catch(error => {\n                    console.log('Could not get movies from DB');\n                });\n        }\n    }, [search_string, movies]);\n\n\n    return(\n        <div id=\"movieList\">\n            { movies.map( movie =>\n                <ul key={movie[\"_id\"]}>\n                    <MovieBox id={movie[\"_id\"]} title={movie[\"title\"]}\n                              duration={movie[\"duration\"]}\n                              genres={movie[\"genres\"]}\n                              imgUrl={movie[\"posterurl\"]}\n                              year={movie[\"year\"]}\n                              imdbRating={movie[\"imdbRating\"]}\n                    />\n                </ul>\n            )}\n        </div>\n    )\n}\n\n\nexport default observer(MovieList);"]},"metadata":{},"sourceType":"module"}