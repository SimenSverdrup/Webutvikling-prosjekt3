{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simen\\\\Documents\\\\A_Studier\\\\Webutvikling\\\\prosjekt-3\\\\frontend\\\\src\\\\components\\\\MovieList\\\\MovieList.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { observer } from \"mobx-react\";\nimport Store from '../../mobx/store';\n\nconst MovieList = () => {\n  //const [numberOfMovies, setNumberOfMovies] = useState(5);\n  const [movies, setMovies] = useState([]);\n  const store = useContext(Store);\n  const {\n    search_string\n  } = store;\n  useEffect(() => {\n    console.log(\"MovieList render! Search string is now: \" + search_string);\n\n    if (search_string) {\n      // non-empty search string -> search for the specified title\n      console.log(\"non-empty search string: \" + search_string);\n      fetch(\"http://localhost:3000/api/movies/title/\" + search_string, {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    } else {\n      // empty search string -> get all movies\n      console.log(\"empty search string\");\n      fetch(\"http://localhost:3000/api/movies/\", {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    }\n  }, [search_string]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default observer(MovieList);","map":{"version":3,"sources":["C:/Users/simen/Documents/A_Studier/Webutvikling/prosjekt-3/frontend/src/components/MovieList/MovieList.tsx"],"names":["React","useContext","useEffect","useState","observer","Store","MovieList","movies","setMovies","store","search_string","console","log","fetch","method","then","res","json","catch","error"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AAEA,SAAQC,QAAR,QAAwB,YAAxB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAIA,MAAMC,SAAS,GAAG,MAAM;AACpB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMM,KAAK,GAAGR,UAAU,CAACI,KAAD,CAAxB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAoBD,KAA1B;AAGAP,EAAAA,SAAS,CAAE,MAAM;AACbS,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAA6CF,aAAzD;;AACA,QAAIA,aAAJ,EAAmB;AACf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BF,aAA1C;AAECG,MAAAA,KAAK,CAAC,4CAA4CH,aAA7C,EACF;AACII,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVT,QAAAA,SAAS,CAACS,IAAD,CAAT;AACH,OAPJ,EAQIC,KARJ,CAQUC,KAAK,IAAI;AACZR,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAVJ;AAWJ,KAfD,MAgBK;AACD;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAECC,MAAAA,KAAK,CAAC,mCAAD,EACF;AACIC,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVT,QAAAA,SAAS,CAACS,IAAD,CAAT;AACH,OAPJ,EAQIC,KARJ,CAQUC,KAAK,IAAI;AACZR,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAVJ;AAWJ;AACJ,GAlCQ,EAkCN,CAACF,aAAD,CAlCM,CAAT;AAsCA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAIH,CAjDD;;AAoDA,eAAeN,QAAQ,CAACE,SAAD,CAAvB","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport MovieBox from '../MovieBox/MovieBox';\r\nimport {observer } from \"mobx-react\"\r\nimport Store from '../../mobx/store'\r\n\r\n\r\n\r\nconst MovieList = () => {\r\n    //const [numberOfMovies, setNumberOfMovies] = useState(5);\r\n    const [movies, setMovies] = useState([]);\r\n    const store = useContext(Store);\r\n    const { search_string } = store;\r\n\r\n\r\n    useEffect( () => {\r\n        console.log(\"MovieList render! Search string is now: \" + search_string);\r\n        if (search_string) {\r\n            // non-empty search string -> search for the specified title\r\n            console.log(\"non-empty search string: \" + search_string);\r\n\r\n             fetch(\"http://localhost:3000/api/movies/title/\" + search_string,\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    setMovies(json);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n        else {\r\n            // empty search string -> get all movies\r\n            console.log(\"empty search string\");\r\n\r\n             fetch(\"http://localhost:3000/api/movies/\",\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    setMovies(json);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n    }, [search_string]);\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(MovieList);"]},"metadata":{},"sourceType":"module"}