{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simen\\\\Documents\\\\A_Studier\\\\Webutvikling\\\\prosjekt-3\\\\frontend\\\\src\\\\components\\\\MovieList\\\\MovieList.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { observer } from \"mobx-react\";\n\nconst MovieList = props => {\n  //const [numberOfMovies, setNumberOfMovies] = useState(5);\n  const [movies, setMovies] = useState([]); //const store = useContext(Store);\n\n  const {\n    states,\n    getState\n  } = props.store;\n  useEffect(() => {\n    console.log(\"Search string is now: \" + states.search_string);\n\n    if (states.search_string) {\n      // non-empty search string -> search for the specified title\n      console.log(\"non-empty search string: \" + states.search_string);\n      fetch(\"http://localhost:3000/api/movies/title/\" + states.search_string, {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    } else {\n      // empty search string -> get all movies\n      console.log(\"empty search string\");\n      fetch(\"http://localhost:3000/api/movies/\", {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    }\n  }, [states, getState]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default observer(MovieList);","map":{"version":3,"sources":["C:/Users/simen/Documents/A_Studier/Webutvikling/prosjekt-3/frontend/src/components/MovieList/MovieList.tsx"],"names":["React","useEffect","useState","observer","MovieList","props","movies","setMovies","states","getState","store","console","log","search_string","fetch","method","then","res","json","catch","error"],"mappings":";AAAA,OAAOA,KAAP,IAA2BC,SAA3B,EAAsCC,QAAtC,QAAqD,OAArD;AAEA,SAAgBC,QAAhB,QAA+B,YAA/B;;AAQA,MAAMC,SAAS,GAAIC,KAAD,IAAkB;AAChC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC,CAFgC,CAGhC;;AACA,QAAM;AAAEM,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAuBJ,KAAK,CAACK,KAAnC;AAGAT,EAAAA,SAAS,CAAE,MAAM;AACbU,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BJ,MAAM,CAACK,aAA9C;;AACA,QAAIL,MAAM,CAACK,aAAX,EAA0B;AACtB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BJ,MAAM,CAACK,aAAjD;AAECC,MAAAA,KAAK,CAAC,4CAA4CN,MAAM,CAACK,aAApD,EACF;AACIE,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVX,QAAAA,SAAS,CAACW,IAAD,CAAT;AACH,OAPJ,EAQIC,KARJ,CAQUC,KAAK,IAAI;AACZT,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAVJ;AAWJ,KAfD,MAgBK;AACD;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAECE,MAAAA,KAAK,CAAC,mCAAD,EACF;AACIC,QAAAA,MAAM,EAAE;AADZ,OADE,CAAL,CAIIC,IAJJ,CAISC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAJhB,EAKIF,IALJ,CAKSE,IAAI,IAAI;AACVX,QAAAA,SAAS,CAACW,IAAD,CAAT;AACH,OAPJ,EAQIC,KARJ,CAQUC,KAAK,IAAI;AACZT,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH,OAVJ;AAWJ;AACJ,GAlCQ,EAkCN,CAACJ,MAAD,EAASC,QAAT,CAlCM,CAAT;AAqCA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAKH,CAjDD;;AAoDA,eAAeN,QAAQ,CAACC,SAAD,CAAvB","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport MovieBox from '../MovieBox/MovieBox';\r\nimport {inject, observer} from \"mobx-react\"\r\nimport Store, {StoreType} from '../../mobx/store'\r\n\r\n\r\ninterface Props {\r\n    store: StoreType;\r\n}\r\n\r\nconst MovieList = (props: Props) => {\r\n    //const [numberOfMovies, setNumberOfMovies] = useState(5);\r\n    const [movies, setMovies] = useState([]);\r\n    //const store = useContext(Store);\r\n    const { states, getState } = props.store;\r\n\r\n\r\n    useEffect( () => {\r\n        console.log(\"Search string is now: \" + states.search_string);\r\n        if (states.search_string) {\r\n            // non-empty search string -> search for the specified title\r\n            console.log(\"non-empty search string: \" + states.search_string);\r\n\r\n             fetch(\"http://localhost:3000/api/movies/title/\" + states.search_string,\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    setMovies(json);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n        else {\r\n            // empty search string -> get all movies\r\n            console.log(\"empty search string\");\r\n\r\n             fetch(\"http://localhost:3000/api/movies/\",\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    setMovies(json);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n    }, [states, getState]);\r\n\r\n\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(MovieList);"]},"metadata":{},"sourceType":"module"}