{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simen\\\\Documents\\\\A_Studier\\\\Webutvikling\\\\prosjekt-3\\\\frontend\\\\src\\\\components\\\\MovieList\\\\MovieList.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport MovieBox from '../MovieBox/MovieBox';\nimport { observer } from 'mobx-react';\nimport Store from '../../mobx/store';\nimport './MovieList.css';\nimport '../MovieBox/MovieBox.css';\n\nconst MovieList = () => {\n  //const [numberOfMovies, setNumberOfMovies] = useState(5);\n  const [movies, setMovies] = useState([]);\n  const [genreChoice, setGenre] = useState(\"\");\n  const store = useContext(Store);\n  const {\n    search_string,\n    genre,\n    sort\n  } = store;\n  useEffect(() => {\n    if (genre !== \"\") {\n      let temp_search_string = search_string === \"\" ? \"*\" : search_string;\n      console.log(\"update genre\");\n      fetch(\"http://localhost:3000/api/movies/genre/\" + temp_search_string + '/' + genre + '/' + sort, {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setMovies(json);\n        setGenre(genre);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    } else {\n      if (search_string) {\n        // non-empty search string -> search for the specified title\n        fetch(\"http://localhost:3000/api/movies/title/\" + search_string + '/' + sort, {\n          method: 'GET'\n        }).then(res => res.json()).then(json => {\n          setMovies(json);\n        }).catch(error => {\n          console.log('Could not get movies from DB');\n        });\n      } else {\n        // empty search string -> get all movies\n        fetch(\"http://localhost:3000/api/movies/\" + '/' + sort, {\n          method: 'GET'\n        }).then(res => res.json()).then(json => {\n          setMovies(json);\n        }).catch(error => {\n          console.log('Could not get movies from DB');\n        });\n      }\n    }\n  }, [search_string, movies, genre, genreChoice, sort]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"movieList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"ul\", {\n    key: movie[\"_id\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MovieBox, {\n    id: movie[\"_id\"],\n    title: movie[\"title\"],\n    duration: movie[\"duration\"],\n    genres: movie[\"genres\"],\n    imgUrl: movie[\"posterurl\"],\n    year: movie[\"year\"],\n    imdbRating: movie[\"imdbRating\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default observer(MovieList);","map":{"version":3,"sources":["C:/Users/simen/Documents/A_Studier/Webutvikling/prosjekt-3/frontend/src/components/MovieList/MovieList.tsx"],"names":["React","useContext","useEffect","useState","MovieBox","observer","Store","MovieList","movies","setMovies","genreChoice","setGenre","store","search_string","genre","sort","temp_search_string","console","log","fetch","method","then","res","json","catch","error","map","movie"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport MovieBox from '../MovieBox/MovieBox';\r\nimport { observer } from 'mobx-react';\r\nimport Store from '../../mobx/store';\r\nimport './MovieList.css';\r\nimport '../MovieBox/MovieBox.css';\r\n\r\n\r\n\r\n\r\nconst MovieList = () => {\r\n    //const [numberOfMovies, setNumberOfMovies] = useState(5);\r\n    const [movies, setMovies] = useState([]);\r\n    const [genreChoice, setGenre] = useState(\"\");\r\n    const store = useContext(Store);\r\n    const { search_string, genre, sort } = store;\r\n\r\n\r\n    useEffect( () => {\r\n        if (genre !== \"\") {\r\n            let temp_search_string = search_string === \"\" ? \"*\" : search_string;\r\n            console.log(\"update genre\")\r\n            fetch(\"http://localhost:3000/api/movies/genre/\" + temp_search_string + '/' + genre + '/' + sort,\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    setMovies(json);\r\n                    setGenre(genre);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n        else {\r\n            if (search_string) {\r\n                // non-empty search string -> search for the specified title\r\n                fetch(\"http://localhost:3000/api/movies/title/\" + search_string + '/' + sort,\r\n                    {\r\n                        method: 'GET'\r\n                    })\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        setMovies(json);\r\n                    })\r\n                    .catch(error => {\r\n                        console.log('Could not get movies from DB');\r\n                    });\r\n            }\r\n            else {\r\n                // empty search string -> get all movies\r\n                fetch(\"http://localhost:3000/api/movies/\" + '/' + sort,\r\n                    {\r\n                        method: 'GET'\r\n                    })\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        setMovies(json);\r\n                    })\r\n                    .catch(error => {\r\n                        console.log('Could not get movies from DB');\r\n                    });\r\n            }\r\n        }\r\n    }, [search_string, movies, genre, genreChoice, sort]);\r\n\r\n\r\n    return(\r\n        <div id=\"movieList\">\r\n            { movies.map( movie =>\r\n                <ul key={movie[\"_id\"]}>\r\n                    <MovieBox id={movie[\"_id\"]} title={movie[\"title\"]}\r\n                              duration={movie[\"duration\"]}\r\n                              genres={movie[\"genres\"]}\r\n                              imgUrl={movie[\"posterurl\"]}\r\n                              year={movie[\"year\"]}\r\n                              imdbRating={movie[\"imdbRating\"]}\r\n                    />\r\n                </ul>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(MovieList);"]},"metadata":{},"sourceType":"module"}