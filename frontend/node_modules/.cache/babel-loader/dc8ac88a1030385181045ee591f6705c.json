{"ast":null,"code":"var _jsxFileName = \"/Users/TheoHolmsen/Documents/webutvikling-prosjekt-3/frontend/src/components/MovieInfo/MovieInfo.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport './MovieInfo.css';\nimport { observer } from \"mobx-react\";\nimport Store from '../../mobx/store';\nconst initialMovie = {\n  _id: \"\",\n  title: \"\",\n  duration: \"\",\n  genres: [\"\", \"\"],\n  year: \"\",\n  actors: [\"\", \"\"],\n  storyline: \"\",\n  imdbRating: \"\",\n  posterurl: \"\"\n};\n\nconst MovieInfo = () => {\n  const store = useContext(Store);\n  const {\n    select_id\n  } = store;\n  const [id, setId] = useState(select_id);\n  const [movie, setMovie] = useState(initialMovie);\n  let duration = \"Unknown\";\n  useEffect(() => {\n    setId(select_id);\n    fetch(\"http://localhost:3000/api/movies/id/\" + id).then(res => res.json()).then(mov => {\n      setMovie(mov);\n    }).catch(error => {\n      console.log('Could not get selected movie from DB');\n    });\n  }, [movie, select_id]);\n  duration = movie[\"duration\"];\n  duration = duration.slice(2);\n  duration = duration.substring(0, duration.length - 1);\n  duration += \" min\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"movieInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: movie[\"_id\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, movie[\"title\"]), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"img\", {\n    id: movie[\"_id\"],\n    src: movie[\"posterurl\"],\n    alt: \"Missing poster\",\n    width: \"170\",\n    height: \"240\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"movieInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Year: \", movie[\"year\"]), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"movieInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Duration: \", duration), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"movieInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Genres: \", movie[\"genres\"].join(', ')), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"movieInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Main actors: \", movie[\"actors\"].join(', ')), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"movieInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"Storyline: \", movie[\"storyline\"]), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"movieInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, \"IMDB rating: \", movie[\"imdbRating\"] ? movie[\"imdbRating\"] + \"/10\" : \"Unknown\"));\n};\n\nexport default observer(MovieInfo);","map":{"version":3,"sources":["/Users/TheoHolmsen/Documents/webutvikling-prosjekt-3/frontend/src/components/MovieInfo/MovieInfo.tsx"],"names":["React","useContext","useEffect","useState","observer","Store","initialMovie","_id","title","duration","genres","year","actors","storyline","imdbRating","posterurl","MovieInfo","store","select_id","id","setId","movie","setMovie","fetch","then","res","json","mov","catch","error","console","log","slice","substring","length","join"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport './MovieInfo.css';\nimport { observer } from \"mobx-react\"\nimport Store from '../../mobx/store'\n\nconst initialMovie = {\n    _id: \"\",\n    title: \"\",\n    duration: \"\",\n    genres: [\"\", \"\"],\n    year: \"\",\n    actors: [\"\", \"\"],\n    storyline: \"\",\n    imdbRating: \"\",\n    posterurl: \"\"\n}\n\nconst MovieInfo = () => {\n    const store = useContext(Store);\n    const { select_id } = store;\n    const [id, setId] = useState(select_id);\n    const [movie, setMovie] = useState(initialMovie);\n\n    let duration = \"Unknown\";\n\n    useEffect( () => {\n        setId(select_id);\n        fetch(\"http://localhost:3000/api/movies/id/\" + id)\n            .then( res => res.json())\n            .then( mov => {\n                setMovie(mov);\n            })\n            .catch( error => {\n                console.log('Could not get selected movie from DB');\n            });\n    }, [movie, select_id]);\n\n    duration = movie[\"duration\"]\n    duration = duration.slice(2);\n    duration = duration.substring(0, duration.length - 1);\n    duration += \" min\";\n\n    return (\n        <div id=\"movieInfo\">\n            <h3 id={movie[\"_id\"]}>{movie[\"title\"]}</h3>\n            <hr/>\n            <img id={movie[\"_id\"]} src={movie[\"posterurl\"]} alt=\"Missing poster\" width=\"170\" height=\"240\"/>\n            <p className=\"movieInfo\">Year: {movie[\"year\"]}</p>\n            <p className=\"movieInfo\">Duration: {duration}</p>\n            <p className=\"movieInfo\">Genres: {movie[\"genres\"].join(', ')}</p>\n            <p className=\"movieInfo\">Main actors: {movie[\"actors\"].join(', ')}</p>\n            <p className=\"movieInfo\">Storyline: {movie[\"storyline\"]}</p>\n            <p className=\"movieInfo\">IMDB rating: {movie[\"imdbRating\"]? movie[\"imdbRating\"] + \"/10\" : \"Unknown\" }</p>\n        </div>\n    )\n}\n\nexport default observer(MovieInfo);"]},"metadata":{},"sourceType":"module"}