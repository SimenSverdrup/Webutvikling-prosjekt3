{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\simen\\\\Documents\\\\A_Studier\\\\Webutvikling\\\\prosjekt-3\\\\frontend\\\\src\\\\components\\\\MovieList\\\\MovieList.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport MovieBox from '../MovieBox/MovieBox';\nimport { observer } from 'mobx-react';\nimport Store from '../../mobx/store';\n\nconst MovieList = () => {\n  //const [numberOfMovies, setNumberOfMovies] = useState(5);\n  const [movies, setMovies] = useState([]);\n  const [genreChoice, setGenre] = useState(\"\");\n  const [genreMatches, setGenreMatches] = useState([]);\n  const [searchMatches, setSearchMatches] = useState([]);\n  const store = useContext(Store);\n  const {\n    search_string,\n    genre\n  } = store;\n\n  function containsObject(movie) {\n    for (let i = 0; i < searchMatches.length; i++) {\n      if (searchMatches[i] === movie) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  useEffect(() => {\n    if (search_string) {\n      // non-empty search string -> search for the specified title\n      if (genre === \"\") {\n        fetch(\"http://localhost:3000/api/title/\" + search_string, {\n          method: 'GET'\n        }).then(res => res.json()).then(json => {\n          setMovies(json);\n          setSearchMatches(json);\n        }).catch(error => {\n          console.log('Could not get movies from DB');\n        });\n      } else {\n        // genre is set\n        // fetch movies matching genre\n        fetch(\"http://localhost:3000/api/genre/\" + genre, {\n          method: 'GET'\n        }).then(res => res.json()).then(json => {\n          setGenre(genre);\n          setGenreMatches(json);\n        }).catch(error => {\n          console.log('Could not get movies from DB');\n        }); // fetch movies matching search\n\n        fetch(\"http://localhost:3000/api/title/\" + search_string, {\n          method: 'GET'\n        }).then(res => res.json()).then(json => {\n          setSearchMatches(json);\n        }).catch(error => {\n          console.log('Could not get movies from DB');\n        });\n        genreMatches.map(movie => {\n          if (containsObject(movie)) {\n            movies.push(movie);\n          }\n        });\n        setMovies(movies);\n      }\n    } else {\n      // empty search string -> get all movies\n      fetch(\"http://localhost:3000/api/movies/\" + \"\", {\n        method: 'GET'\n      }).then(res => res.json()).then(json => {\n        setGenre(genre);\n        setSearchMatches(json);\n        setMovies(json);\n      }).catch(error => {\n        console.log('Could not get movies from DB');\n      });\n    }\n  }, [search_string, movies, genreChoice]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"movieList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, movies.map(movie => /*#__PURE__*/React.createElement(\"ul\", {\n    key: movie[\"_id\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MovieBox, {\n    id: movie[\"_id\"],\n    title: movie[\"title\"],\n    duration: movie[\"duration\"],\n    genres: movie[\"genres\"],\n    imgUrl: movie[\"posterurl\"],\n    year: movie[\"year\"],\n    imdbRating: movie[\"imdbRating\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default observer(MovieList);","map":{"version":3,"sources":["C:/Users/simen/Documents/A_Studier/Webutvikling/prosjekt-3/frontend/src/components/MovieList/MovieList.tsx"],"names":["React","useContext","useEffect","useState","MovieBox","observer","Store","MovieList","movies","setMovies","genreChoice","setGenre","genreMatches","setGenreMatches","searchMatches","setSearchMatches","store","search_string","genre","containsObject","movie","i","length","fetch","method","then","res","json","catch","error","console","log","map","push"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\r\nimport MovieBox from '../MovieBox/MovieBox';\r\nimport { observer } from 'mobx-react';\r\nimport Store from '../../mobx/store';\r\n\r\n\r\n\r\nconst MovieList = () => {\r\n    //const [numberOfMovies, setNumberOfMovies] = useState(5);\r\n    const [movies, setMovies] = useState([]);\r\n    const [genreChoice, setGenre] = useState(\"\");\r\n    const [genreMatches, setGenreMatches] = useState([]);\r\n    const [searchMatches, setSearchMatches] = useState([]);\r\n    const store = useContext(Store);\r\n    const { search_string, genre } = store;\r\n\r\n    function containsObject(movie: JSON) {\r\n        for (let i = 0; i < searchMatches.length; i++) {\r\n            if (searchMatches[i] === movie) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    useEffect( () => {\r\n        if (search_string) {\r\n            // non-empty search string -> search for the specified title\r\n            if (genre === \"\") {\r\n                fetch(\"http://localhost:3000/api/title/\" + search_string,\r\n                    {\r\n                        method: 'GET'\r\n                    })\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        setMovies(json);\r\n                        setSearchMatches(json);\r\n                    })\r\n                    .catch(error => {\r\n                        console.log('Could not get movies from DB');\r\n                    });\r\n            }\r\n            else {\r\n                // genre is set\r\n                // fetch movies matching genre\r\n                fetch(\"http://localhost:3000/api/genre/\" + genre,\r\n                    {\r\n                        method: 'GET'\r\n                    })\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        setGenre(genre);\r\n                        setGenreMatches(json);\r\n                    })\r\n                    .catch(error => {\r\n                        console.log('Could not get movies from DB');\r\n                    });\r\n                // fetch movies matching search\r\n                fetch(\"http://localhost:3000/api/title/\" + search_string,\r\n                    {\r\n                        method: 'GET'\r\n                    })\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        setSearchMatches(json);\r\n                    })\r\n                    .catch(error => {\r\n                        console.log('Could not get movies from DB');\r\n                    });\r\n                genreMatches.map( movie => {\r\n                    if (containsObject(movie)) {\r\n                        movies.push(movie)\r\n                    }\r\n                })\r\n                setMovies(movies);\r\n            }\r\n        }\r\n        else {\r\n            // empty search string -> get all movies\r\n            fetch(\"http://localhost:3000/api/movies/\" + \"\",\r\n                {\r\n                    method: 'GET'\r\n                })\r\n                .then(res => res.json())\r\n                .then(json => {\r\n                    setGenre(genre);\r\n                    setSearchMatches(json);\r\n                    setMovies(json);\r\n                })\r\n                .catch(error => {\r\n                    console.log('Could not get movies from DB');\r\n                });\r\n        }\r\n    }, [search_string, movies, genreChoice]);\r\n\r\n\r\n    return(\r\n        <div id=\"movieList\">\r\n            { movies.map( movie =>\r\n                <ul key={movie[\"_id\"]}>\r\n                    <MovieBox id={movie[\"_id\"]} title={movie[\"title\"]}\r\n                              duration={movie[\"duration\"]}\r\n                              genres={movie[\"genres\"]}\r\n                              imgUrl={movie[\"posterurl\"]}\r\n                              year={movie[\"year\"]}\r\n                              imdbRating={movie[\"imdbRating\"]}\r\n                    />\r\n                </ul>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default observer(MovieList);"]},"metadata":{},"sourceType":"module"}